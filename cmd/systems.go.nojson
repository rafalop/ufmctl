package cmd

import (
//	"os"
	"fmt"
	"github.com/spf13/cobra"
	"ufmctl/pkg/ufm"
	//"io"
	//"encoding/json"
	"strconv"
//"github.com/tidwall/gjson"
)

var systemsCmd = &cobra.Command{
	Use:   "systems {subcommand} {args}",
	Short: "Perform systems operations",
	Long:  "Get systems in ufm",
	//Run: func(cmd *cobra.Command, args []string) {
	//	if len(args) < 1 {
	//		fmt.Println("pkeys requires at least one subcommand.")
	//	}	
	//},
}
	//SystemsBrief    bool
	//SystemsIP       string
	//SystemsType     string
	//SystemsModel    string
	//SystemsRole     string
	//SystemsPeerName string
	//SystemsChassis  bool
	//SystemsPorts    bool
	//SystemsInRack   bool
	//SystemsComputes string

var systemsListCmd = &cobra.Command{
	Use:   "list",
	Short: "List systems in UFM",
	//Long:  "List sytsems in UFM",
	Run: func(cmd *cobra.Command, args []string) {
		u := GetUfmClient()
		filters := []string{}
		filters = append(filters, "brief="+strconv.FormatBool(SystemsBrief))
		filters = append(filters, "chassis="+strconv.FormatBool(SystemsChassis))
		filters = append(filters, "ports="+strconv.FormatBool(SystemsPorts))
		filters = append(filters, "in_rack="+strconv.FormatBool(SystemsInRack))
		if len(SystemsIP) > 0 {
			filters = append(filters, "ip="+SystemsIP)
		}
		if len(SystemsType) > 0 {
			filters = append(filters, "type="+SystemsType)
		}
		if len(SystemsModel) > 0 {
			filters = append(filters, "model="+SystemsModel)
		}
		if len(SystemsRole) > 0 {
			filters = append(filters, "role="+SystemsRole)
		}
		if len(SystemsPeerName) > 0 {
			filters = append(filters, "peer_name="+SystemsPeerName)
		}
		if len(SystemsComputes) > 0 {
			filters = append(filters, "computes="+SystemsComputes)
		}
		systems, err := u.GetSystems(filters)
		if err != nil {
			ExitError(err)
		}
		//systemsJson, err := json.Marshal(systems)
		//fmt.Println(string(systemsJson))
		printSystemsTable(systems)
	},
}

func printSystemsTable(systems []ufm.System) {
		PrintColumn("SYS_NAME", 50)
		PrintColumn("STATE", 8)
		PrintColumn("ROLE", 10)	
		PrintColumn("TYPE", 10)	
		PrintColumn("FW_VERSION", 20)	
		PrintColumn("IP", 20)	
		fmt.Printf("\n")
		for _, system := range systems {
			if len(system.SystemName) > 50 {
				PrintColumn(system.SystemName[:49], 50)
			} else {
				PrintColumn(system.SystemName, 50)
			}
			PrintColumn(system.State, 8)
			PrintColumn(system.Role, 10)
			PrintColumn(system.Type, 10)
			PrintColumn(system.FirmwareVersion, 20)
			PrintColumn(system.IP, 20)
			fmt.Printf("\n")
		}
}
